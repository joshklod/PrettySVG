#!/usr/bin/perl
#
# TODO:
# - Metadata whitespace
# - Handle multiline strings
# - Split d/points/style strings logically

use strict;
use warnings;
use autodie;

my $match_string   = qr/'[^']*'|"[^"]*"/;

my $indent        = 2;
my $indent_attr   = 3;
my $wrap_attr_min = 2;
my $wrap_tag_end  = 0;

if ($indent        =~ /^\d+$/) { $indent        = ' ' x $indent; }
if ($indent_attr   =~ /^\d+$/) { $indent_attr   = ' ' x $indent_attr; }

my $level     = 0;
my $in_text   = 0;

{
	my ($line, @chars);
	my $idx    = 0;

	sub getline {
		if ($idx > $#chars) {
			$line = <>;
			unless ($line) { $line = ""; }
			@chars  = split(//, $line);
			$idx    = 0;
		}
	}

	sub column {
		my $left = substr($line, 0, $idx);
		$left =~ s/\t/        /g;
		return length $left;
	}

	sub nextchar {
		my ($c) = @_;

		getline();

		if ($#chars == -1) {
			return 0;
		} elsif (length $c) {
			return ($chars[$idx] eq $c);
		} else {
			return 1;
		}
	}

	sub getmatch {
		my ($regex) = @_;
		unless (ref $regex eq 'Regexp') {
			$regex = qr/\Q$regex\E/;
		}

		getline();

		my ($match) = substr($line, $idx) =~ /^($regex)/;
		if (defined $match) {
			$idx += length($match);
		} else {
			$match = '';
		}

		return $match;
	}

	sub find_match {
		my ($regex, $skip_str) = @_;
		unless (defined $skip_str) { $skip_str = 0; }
		unless (ref $regex eq 'Regexp') {
			$regex = qr/\Q$regex\E/;
		}
		my $match;

		my $dot = $skip_str ? qr/(?>$match_string|.)/ : qr/./;

		my $result = '';
		while (nextchar()) {
			if ($match = getmatch(qr/$dot*?$regex/)) {
				$result .= $match;
				last;
			} else {
				$result .= getmatch(qr/.*/s);
			}
		}
		return $result;
	}
}

sub attr_sort {
	sub priority {
		my ($attr) = @_;
		my @order = ('id', qr/^xmlns(?:\:.*)?$/, qr/^(?:xlink:)?href$/,
				qr/^c?[xy]\d?$/, 'width', 'height', qr/^r[xy]?$/, 'transform',
				'fill', 'stroke', 'opacity', 'style', 'd', 'points');

		for (my $idx = 0; $idx <= $#order; $idx++) {
			my $pat = $order[$idx];
			if (ref $pat eq 'Regexp' ? $attr =~ $pat : $attr eq $pat) {
				return $idx;
			}
		}
		return $#order + 1;
	}

	my ($attr_a) = $a =~ /^([^=]*)/;
	my ($attr_b) = $b =~ /^([^=]*)/;

	# Fall back to alphabetical sort if priority is equal
	return ((priority($attr_a) <=> priority($attr_b)) or
			($attr_a cmp $attr_b) or ($a cmp $b));
}

sub find_tag {
	my $text = '';
	while (nextchar() && !nextchar('<')) {
		$text .= getmatch(qr/[^<]*/);
	}

	unless ($in_text) {
		if ($text =~ /\S/) {
			if ($text =~ s/^\s*\n//) {
				# Use indent of first line as reference
				$text =~ /^(\s*)/;
				$text =~ s/^\Q$1\E/$indent x $level/emg;
			} else {
				$text = ($indent x $level) . $text;
			}

			$text =~ s/\s+$//;
			$text =~ s/[[:blank:]]+$//mg;

			$text .= "\n";
		} else {
			$text = '';
		}
	}

	print $text;
	return nextchar('<');
}

sub get_tag {
	my $tag             = '';

	if      ($tag = getmatch('<!--')) {
		$tag .= find_match('-->');
	} elsif ($tag = getmatch('<?')) {
		$tag .= find_match('?>');
	} elsif ($tag = getmatch('<![CDATA[')) {
		$tag .= find_match(']]>');
	} elsif ($tag = getmatch('</')) {
		$tag .= find_match('>');
	} else {
		$tag .= find_match('>', 1);
	}

	return $tag;
}

sub format_tag {
	my ($tag) = @_;
	my @attrs;

	my $end = $tag =~ s{(/?>)$}{} ? $1 : '';

	$tag =~ s/\s+$//;

	while ($tag =~ s/\s+(\S*)\s*=\s*($match_string|\S*)//) {
		push(@attrs, "$1=$2");
	}
	while ($tag =~ s/\s+(\S+)//) {
		push(@attrs, $1);
	}
	@attrs = sort attr_sort @attrs;

	my $sep = (@attrs >= $wrap_attr_min) ? "\n".$indent_attr : ' ';
	$tag = join($sep, ($tag, @attrs, $end));

	if ($end eq '/>') {
		if (!$wrap_tag_end && @attrs >= $wrap_attr_min) {
			$tag =~ s{\s*/>$}{ />};
		}
	} else {
		unless ($wrap_tag_end && @attrs >= $wrap_attr_min) {
			$tag =~ s{\s*>$}{>};
		}
	}

	return $tag;
}

my $color = 0;
sub process_tag {
	my $type;

	my $tag = get_tag();

	if    ($tag =~ /^<[!?]/) { $type = 'misc'; }
	elsif ($tag =~ m{^</})   { $type = 'close'; }
	elsif ($tag =~ m{/>$})   { $type = 'empty'; }
	else                     { $type = 'open'; }

	my $name = ($type eq 'misc') ? '' : lc (($tag =~ m{^</?([\w:\-.]*)})[0]);

	if      ($type eq 'open' || $type eq 'empty') {
		$tag = format_tag($tag);
		$tag =~ s/\n/"\n".($indent x $level)/emg;
	} elsif ($type eq 'close') {
		$tag =~ s/\s*>$/>/;
		$level-- unless ($level == 0);
	}

	$tag = "\e[" . ($color + ($color < 6 ? 31 : 85)) . "m$tag\e[0m";
	if (++$color > 11) { $color = 0; }

	unless ($in_text) { $tag = ($indent x $level) . $tag; }

	if ($name eq 'text') {
		if    ($type eq 'open')  { $in_text = 1; }
		elsif ($type eq 'close') { $in_text = 0; }
	}

	unless ($in_text) { $tag .= "\n"; }

	print $tag;
	if ($type eq 'open') { $level++; }
}

while (nextchar()) {
	find_tag() and process_tag();
}
